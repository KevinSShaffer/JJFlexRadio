Log statistics:
    Add DXCC to the log.
    JJCountriesDB - need DXCC lookup.
    itemStats:
        field's value, number found, number confirmed
    criteria:
        field's adif
        initFunction - run this to fill if field is null.
        current - dictionary, key=field value, value=itemStats.


LOTW merge:
    inputs: current logfile and LOTW .adi file
    See import.vb for log file open example.
    See adif dll for adif handling.

Memory group scan:
    class ScanGroup
        string Name
        MemoryData[] Members
        bool Readonly
    Get reserved groups upon ReservedGroupChange event.
    Scan dialogue:
        Checked list of groups
        Manage groups button.
        Scan speed (.1 seconds)
        Start/Stop button - scans checked groups
        Use Saved Button
        Save Button
            class GroupScan
                string Name
                ScanGroup[] Groups
            prompt for name, and ask to replace.
        Clear Button
        Saved scans stored /operator/rig
    manage:
        List groups in a multi-check checkBox
        Show selected group members on the right.
        Support Readonly (predefined) groups
        functions are Add, Update, Remove, and Include in Scan
        Add: Specify group name and add memories from list.
        Update:  Update selected (not necessarily checked) group.
        Remove: Remove checked groups.
        Memory groups stored per user/per rig.
    GetNext: get next memory in group.
Reserved groups:
    Setup when memories are loaded
    Refreshed when a memory is added, or the name or group changes.
        Memory considered added if changes from empty to not empty.
User-defined groups:
    Can be permanent or temporary
    Setup when memories are loaded
    Refreshed when an included memory name or group changes.
Memory group scan:
    Show MemoryGroups form with Scan UserControl
Manage groups:
    Only used when User-Defined groups implemented.
    Show MemoryGroups form with Manage UserControl.

log separate window:
    LogData - contains log session and functions
    LogForm - is the form using data in a LogData instance.
    ContactLogData is the main instance of LogData.
    LogData:
        Open(position, cleanupDelegate):
            open and start session.
        GetSearchArg():Use the session that's setup.
        GetFieldTextValue(string):
            if TheForm get text
        close():
            needs to see if form is up.
        SetDateTime:
            if TheForm, TheForm.SetDateTime()
    FindLogEntry:
        _load:
            matchData = new LogData
            matchData.open(-1, cleanup)
            ...
        showItem(i):
            create new logData and open to i.position.
            ...
    LogForm:
        references a LogData
        bool searching - set if getting search arg.
        needsWrite sets the logData.NeedsWrite if the call is nonempty.
        GotoFieldAndActivate(string adif):
            if gotoField(adif), me.Activate()
    keyCommands:
        bringupLogForm:
            if ContactLogData is null,
                ContactLogData = new logData
                ContactLogData.Open(-1, ContactLogData.Cleanup)
                start thread and wait for ContactLogData.TheForm.
                thread:ContactLogData.TheForm = new LogForm
            ContactLogData.TheForm.GotoFieldAndActivate()

Flex:
    Add RadioSelection.ComType to RadioSelection.ComDefaults and RigData.rig
    RigInfo:
        add: Discover rigs upon leaving the model box.
        update: Just show name.

external programs:
ExternalProgramType:
    string Name; // Internal name
    string Filename; // program's file name
    string Parameters; // Can contain macros
    string HelpText;
ExternalPrograms functions are like those for CWText.
KeyCommands:
    KeyTypes: add external = 8
    See UpdateCWText() routines.
    Update CurrentKeys()
    HelpText: Add new KeyExternalValues array
DefineCommands:
    externalChanges set if external key definitions changed.

Call channel:
class CallChannelType:
    bool _Active
    bool Active property
    MemoryData Item;
CallChannelType[] CallChannels
CallChannelType CallChannel property
TS-2000:
    constructor creates CallChannel object.
    FR/FT 3 is call channel, also memory 300.
        set _active
    Always read memory 300 when receive MC300.
Form1 ShowFrequency:
    Use "!" for call channel, see vfoLetter().
    Three states, usingVFO, usingMem, and usingCallChannel.
    usingCallChannel uses same display as usingVFO.
Form1 AdjustVFO:
    case "!": toggle CallChannel.Active

key definitions:
    keyDefType: key, id
    default keys is a keyDefType array
    keyTbl: key is now keyDefType
        It's in help id order.
        Can contain null items
    KeyConfigType_V1: items is now keyDefType
        Old keydefs file is in commandValues order.
    lookup(commandValue) and lookup(keys) return assoc. keyTbl.
    doCommand uses lookup() and sets commandID.
    helpText: keyTable is in help order.
    setValues(keyDeftype[])
    getValues() returns keyDefType[]
    myKeyCommands in LogEntry:
        myCmdIDs is now keyDefType array.
        setup myCommands.KeyTable with keyTbl items from Commands.KeyTable using setValues(myCmdIDs).

customized log
areas to consider: import/export, log search.
static fields:
    header:  Version, FirstSerial, DupCheck, formName
    records:  version, date, time, rxFreq, txFreq, band, mode, call, serial
entryData in LogEntry.vb:
    add ADIF keyword
    replace the func field with a type, text, combo, or countryData.
        see setCountryItems() and setZoneItems().
    add commandKey that goes to the field.
        See gotoCommand()
Log forms provide the entryData array.
log form name is from the log or use "Default".
LogExternal needs rework.
    rename to MacroItems and make static (shared).
    macroItemType: text, macroID
        macroID: C=mycall, c=call, N=myname, n=name, S=mySerial (STX),
            s=serial (SRX), Q=myQTH, q=qth, R=myRST, r=RST,

ScreenFields menu:
ScreenFieldsType:
    text, control
in RigFields, ScreenFieldsType ScreenFields;
ScreenFieldsSetup:
    Clear ScreenFieldsMenu items
    setup ToolStripMenuItem(s) from RigFields.ScreenFields:
        AccessRole, Name, Text, size(227,22) 
        addhandler click, doFocus
    ScreenFieldsMenu.AddRange()

sub-receiver:
main program exports two 1-cell rig-dependent-data areas:
    each has a char value and a readOnly char[] members.
        value is a char from members.
public class RigDependent // defined in AllRadios
    public class entries
        private char[] items
        public char this[int id] get{return items[id];}
    public entries Members
    internal object val
    public char Value
        get {return valGet(val);}
        set {valSet(value);}
ts2000:
two values, xmit and ctrl, values are main and sub.
    xmit set: if value changed, set xmit, then restore ctrl.
    ctrl set: set ctrl
contdc sets the values.

Legal frequency display:
Kicked off by menu item.
display control:
    originally show for current frequency.
    Allow a new band to be entered.
display:

add license class:
PersonalData:
    add Bands.Licenses LicenseClass to personal class.
    Add License list to LogInfo form.
    in _load: set selectedindex from .License.
    in OKButton set value from selectedIndex.

Pan adapter:
Pan:
    Register for pan data interrupt
    Use current frequency.
    exit to selected band area when area on display is clicked.
display:
    initially assume display size is 40 cells.
    start/stop frequencies initially set to entire band.
    allow user to select band, license class, and mode.
    pan increment: (highFreq - lowFreq)/cells
    start display when noise floor determined.
    Readjust display if floor decreases.
Rig functions:
    rigcaps indicates pan support.
    FrequencyRange(long low, long high) - frequency range.
    Incrment(long increment-in-hz)
    Start() - start panning
        AGC must be fast as possible.
        might provide a mute-receiver function.
    Stop() - stop panning
    Pan data interrupt:
        Gives frequency and meter reading.
internals:
    freq and smeter receiver routines must raise int when data received

log characteristics:
    Replaces the log open menu item.
    form shows logfile name dupType and firstSerial.
    contains a browse button
    theOp must be set to PersonalData.Personal.
    Header update:
        start session with (false, nothing), see LogSession.start()
        update the header.
    Move LogEntry.GetLogfileName() to here.
    personalInfo:
        logfile name replaced with setup/change logfile button
        set logCharacteristics.theOp with theOp.
    LogClass:
        Open(mustOpen) as boolean:
            if (mustOpen and no logname) use logCharacteristics.showdialogue()
            Do nothing with the session.
        SetupSession(clzrtn):
            sets up the session with cleanups.
    LogSession:
        Start(getInfoFlag, clzrtn):
            if theLog.sessions = 0
                theLog.open(getInfoFlag)
            theLog.SetupSession(clzrtn).
        UpdateHeader:
            runs under the lock.
    form1:
        FileExitToolStripMenuItem_Click should use ContactLog.Cleanup

log header:
    format:
        version (hdrnnn)
        creating operator data: call, name, qth
        starting serial no.
        dupCheck no/call/callAndBand/callAndBandAndMode
    Export:
        header:
            "Log Header"
            <LogHeaderVersion:6>hdrnnn
            <CALL:n>op's call
            <NAME:n>name
            <QTH>n>qth
            <STX:n>starting serial no.
            <DUPCHK:n>dupCheck value
            <LogVersion:3>log version
            <ProgramVersion:n>program version
            <EOH>
    Import:
        Update header data from available header fields.
    Form1:
        Provide Update Log Characteristics menu item
            currently sets NewlogDupChecking, default none.
            Update log's header.
            re-initialize current log's dup checking if changed.
    LogClass:
        contains header fieldIDs and ADIF tags.
        contains items from header
        Also has NewlogDupChecking
    logSession:
        Start:
            if header present:
                read header
            else create header:
                use NewlogDupChecking
            set firstRecordPosition to record after header.

Dup checking:
    ask and set in header at log creation.
    re-initialize if log's dup checking is changed.
    class keyElement:
        Key as string
        ID as string
        new(session, dupType): build key according to dup type
    class dupCheckElement:
        contains: key string, count, and record id (serial)
    class dupCheckData:
        dups as Dictionary<key string, element>
        dupType as DupTypes
        DupTest(keyas keyElement) as integer:
            return element.count or 0 if not found.
        AddToDictionary(key as keyElement)
            if key string in dictionary
                if not already present,
                    increment count and add the id.
            else
                add a new element.
        RemoveFromDictionary(key)
            remove specified occurrence from dictionary
    log initialization:
        AddToDictionary(key) for each record.
    LogEntry:
    setDup(keyChange):
        ct = dupTest(key)
        if !onFile || keyChange
            ct += 1
        screen count = ct
        isDup = (ct > 1)
        alarm if isDup
    callsign_enter:
        oldcall = screen call
    callSign_Leave:
        if oldcall not null and oldcall != screen call
            RemoveFromDictionary(originalKey)
        setDup(oldCall != screen call)
    showEntry:
        setDup(false)
    iWrite()
        AddToDictionary(key)
    OK button:
        perform field exit for the field we're in.
    write:
        perform field exit for the field we're in.

log serial no.:
    Put as last field, readOnly.
    first one is serial from header
    Provide a command to send it.

Code preset message sending:
    messages kept with the operator data.
    CWMessageClass:
        MessageItem:
            key as Keys
            message as String
            label as string
        Add: adds a MessageItem
            Put up Add dialogue
            Don't allow if key is a duplicate.
        Update():
            Put up list of key-and-message for current op
            Use add dialog to update selected item.
            Provide a remove
        provide Default and Length properties.
    PersonalData:
        personal class contains array of MessageItem values.
        CurrentID property loads the op's values.
        UpdateCWText: updates messages and writes operator
    KeyCommands:
        DoCommand:
            check MessageItems if command key not found.
            If found, send with RigControl.SendCW().
        HelpText:
            Include MessageItems, use the label
            return additional type parameter

Power Checking:
    powerWasOn switch
    sinceLastCheck switch
    powerON:
        Called whenever anything arrives from the rig.
        if ! sinceLastCheck
            Set sinceLastCheck
            raisePowerOn
    Timer:
        if sinceLastCheck
            reset sinceLastCheck
        else
            raisePowerOff
        Call rig's powerOnCheck
    raisePowerOn:
        if ! powerWasOn
            Raise PowerOn interrupt
            set powerWasOn
            Call rigStat(False)
    raisePowerOff:
        if powerWasOn
            Raise PowerOff interrupt
            Reset powerWasOn
    powerOnCheck:returns true/false
        Call rig's powerOnCheck
        wait up to a second for powerWasOn
    heartbeatFlag switch
    Heartbeat:
        Get: return (heartbeatFlag && cont)
        Set:
            set/reset heartbeatFlag
            if cont
                enable/disable timer
            reset powerWasOn and sinceLastCheck
    toggleContinuous:
        if ! cont (turning off)
            Heartbeat = False
        else (enabling)
            if heartbeatFlag
                Heartbeat = true

submenu notes:
just one bank, but no MenuBankCombo
Menus, numberOfMenus is provided
Use a menuInfo object to pass the info
menuInfo: banks, Menus, window location,


filters:
Rig provides a user control for its filters.
The rig's FilterBox property provides the control.
cw/fsk - FW-width is-shift
FM - fw-normal/narrow
ssb/am/fm sl-low, sh-high
AllRadios:
    Provides RigFields item containing:
        Control RigControl for screen fields.
        method RigUpdate to update the fields.
KenwoodTS590:
    provide info for RigFields
TS590Filters:
    updateStatus() like updateStatus() in form1.
    Need a modeChangeClass and Actions.
    setupBoxes like the one in Form1.
